==Welcome to the  OWASP Hackademic Challenges project==


The '''OWASP Hackademic Challenges''' Project helps you test your knowledge on web application security. You can use it to actually attack web applications in a realistic but also controllable and safe environment.

The latest production version is the next branch, the development version is the next-dev branch.


==Description==

The Hackademic Challenges implement realistic scenarios with known vulnerabilities in a safe, controllable environment. Users can attempt to discover and exploit these vulnerabilities in order to learn important concepts of information security through the attacker's perspective.

Currently, there are 10 web application security scenarios available.

You can choose to start from the one that you find most appealing,although we suggest to follow the order presented on the first page.We intend to expand the available challenges with additional scenarios that involve cryptography, and even vulnerable systems implemented in download-able virtual machines.




==Deployment ==

The project can be easily deployed to any PHP-capable web server running mysql/mariadb. 

= Road Map and Getting Involved =

We maintain an up to date list of open issues on the platform on our issues page on github [https://github.com/Hackademic/hackademic/issues here]

For a list of features we would like implemented you can see either the issues page or our [https://www.owasp.org/index.php/GSoC2013_Ideas#OWASP_Hackademic_Challenges_-_New_challenges_and_Improvements_to_the_existing_ones Google Summer Of Code ideas page]

Involvement in the development and promotion of the Hackademic Challenges is actively encouraged!
You do not have to be a security expert in order to contribute.
Some of the ways you can help:
* Write Documentation
* Write Unit tests
* Develop themes and plugins
* Write Challenges or Articles or contribute security courses


== Tips for developers ==

Hackademic is a young project, however, it's gaining momentum fast. If you are interested in contributing you should follow some basic guidelines.

* The latest development version is the next-dev branch, you should check it out and make all your pull requests there.
Hackademic CMS

* Unit Tests:
We are trying to introduce unit tests which is usually a very good idea. So:

** New features should come with php-unit unit tests testing that the feature works as expected
** All the code should pass the existing unit tests before merging
** If you have to modify a test make sure that nothing else breaks

* Coding - Style:

A couple of years ago we decided to adopt the Drupal coding style, so with some lag it's a very good idea to do that.
** Every commit shouldn't generate any errors with  PHP_CodeSniffer (to fix most errors you can use PHP Coding Standards Fixer )

* Commits
Clean commits make it easy to review code  and make sure that it only does one thing. So:

** One commit should fix one problem or introduce one feature only, please don't commit fixes all around the place.
** Commits should be atomic, each commit should work by itself
** Only what you modified goes in the commit ( for example you shouldn't commit vim/project files or anything unrelated)
** The commit message should explain what you did
** Every commit should merge with next-dev without conflicts (rebase often)



== Contact Us==
You can find us on the #hackademic-dev channel on Freenode
Also our mailing list is owasp-hackademic-challenges@lists.owasp.org
you can join here https://lists.owasp.org/mailman/listinfo/owasp-hackademic-challenges


