==Welcome to the  OWASP Hackademic Challenges project==


The '''OWASP Hackademic Challenges''' Project helps you test your knowledge on web application security. You can use it to actually attack web applications in a realistic but also controllable and safe environment.

The latest production version is the next branch, the development version is the next-dev branch.


==Description==

The Hackademic Challenges implement realistic scenarios with known vulnerabilities in a safe, controllable environment. Users can attempt to discover and exploit these vulnerabilities in order to learn important concepts of information security through the attacker's perspective.

Currently, there are 10 web application security scenarios available.

You can choose to start from the one that you find most appealing,although we suggest to follow the order presented on the first page.We intend to expand the available challenges with additional scenarios that involve cryptography, and even vulnerable systems implemented in download-able virtual machines.




==Deployment ==

The project can be easily deployed to any PHP-capable web server running mysql/mariadb. 

= Road Map and Getting Involved =

We maintain an up to date list of open issues on the platform on our issues page on github [https://github.com/Hackademic/hackademic/issues here]

For a list of features we would like implemented you can see either the issues page or our [https://www.owasp.org/index.php/GSoC2013_Ideas#OWASP_Hackademic_Challenges_-_New_challenges_and_Improvements_to_the_existing_ones Google Summer Of Code ideas page]

Involvement in the development and promotion of the Hackademic Challenges is actively encouraged!
You do not have to be a security expert in order to contribute.
Some of the ways you can help:
* Write Documentation
* Write Unit tests
* Develop themes and plugins
* Write Challenges or Articles or contribute security courses


== Tips for developers ==

Thanks a lot for the contribution! We welcome any and all new code to the project!
In order to make your (and our ) life easier bellow are some very basic instructions on what we'd like to see in a new pull request.
If a pull request doesn't meet any of the following we will either ask you to fix it or it will be delayed in merging.
Common sense applies and we're all students so if you have suggestions feel free to comment/communicate or generally get in touch.

Since the project is gaining some momentum and thus the code base grows the following are some instructions that developers should follow.
(In the early stages of this change many of the points mentioned here won't be present in the codebase, if that's true then add them).
So, every pull request (for non-commiters) or commits to be merged to the next,next-dev branches should follow the following:

* The latest development version is the next-dev branch, you should check it out and make all your pull requests there.
Hackademic CMS
* Unit Tests:
We are trying to introduce unit tests which is usually a very good idea. So:

** New features should come with php-unit or selenium (or better both)  unit tests testing that the feature works as expected
** All the code should pass the existing unit tests before merging
** If you have to modify a test make sure that nothing else breaks

* Coding - Style:

A couple of years ago we decided to adopt the Drupal coding style, so with some lag it's a very good idea to do that.
** Every commit shouldn't generate any errors with  PHP_CodeSniffer (to fix most errors you can use PHP Coding Standards Fixer )

* Commits
Clean commits make it easy to review code, also commits that do only one thing are easier to manage bug-wise. So:

** One commit should fix one problem or introduce one feature only, please don't commit fixes all around the place.
** Commits should be atomic, each commit should work by itself
** Only what you modified goes in the commit ( for example you shouldn't commit vim/project files or anything unrelated)
** The commit message should explain what you did briefly
** Every commit should merge with next-dev without conflicts (rebase often)

* Pull Requests

** All pull requests should be for the next-dev branch.
** In case you found an important bug in a previous version and you think people running the version should get the fix then issue a pull request for that specific version. (It should still merge without any conflicts though)



== Contact Us==
You can find us on the #hackademic-dev channel on Freenode
Also our mailing list is owasp-hackademic-challenges@lists.owasp.org
you can join here https://lists.owasp.org/mailman/listinfo/owasp-hackademic-challenges


